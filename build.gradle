ext {
    linkScmUrl = 'https://github.com/rcarpinterospring-integration'
    linkScmConnection = 'scm:git:git://github.com/rcarpintero/spring-integration.git'
    linkScmDevConnection = 'scm:git:ssh://git@github.com:rcarpintero/spring-integration.git'
}

group = 'org.springframework.integration'

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

ext {
    javaxActivationVersion = '1.1.1'
    javaxMailVersion = '1.5.5'    
    springVersion = '4.3.1.RELEASE' 
    springIntVersion = '4.3.1.RELEASE'
    slf4jVersion = "1.7.21"
}

jacoco {
    toolVersion = "0.7.2.201409121644"
}

sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources', 'src/test/java']
        }
    }
}

ext.xLintArg = '-Xlint:all,-options,-processing'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

task checkTestConfigs {
    doLast {
        def configFiles = []
            sourceSets.test.java.srcDirs.each {
                fileTree(it).include('**/*.xml').exclude('**/log4j.xml').each { configFile ->
                    def configXml = new XmlParser(false, false).parse(configFile)

                        if (configXml.@'xsi:schemaLocation' ==~ /.*spring-[a-z-]*\d\.\d\.xsd.*/) {
                            configFiles << configFile
                        }
                }
            }
        if (configFiles) {
            throw new InvalidUserDataException('Hardcoded XSD version in the config files:\n' +
                    configFiles.collect {relativePath(it)}.join('\n') +
                    '\nPlease, use versionless schemaLocations for Spring XSDs to avoid issues with builds ' +
                    'on different versions of dependencies.')
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/reports/jacoco/html"
    }
}

test {
    maxHeapSize = "1024m"
    jacoco {
       append = false
       destinationFile = file("$buildDir/jacoco.exec")
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    manifest {
        attributes('Implementation-Version': version)
    }
}

build.dependsOn jacocoTestReport

description = 'Spring Integration Mail Support'

dependencies {
    compile "org.springframework.integration:spring-integration-core:$springIntVersion"
    compile "org.springframework:spring-context-support:$springVersion"
    compile "org.springframework.integration:spring-integration-core:$springIntVersion"
    testCompile "org.springframework.integration:spring-integration-test:$springIntVersion"
    compile "javax.mail:javax.mail-api:$javaxMailVersion"
    compile "com.sun.mail:imap:$javaxMailVersion"
    compile "com.sun.mail:javax.mail:$javaxMailVersion"
    compile "javax.activation:activation:$javaxActivationVersion"
    testRuntime "org.slf4j:slf4j-log4j12:$slf4jVersion"
}

// suppress javax.activation path warnings
[compileJava,compileTestJava]*.options*.compilerArgs = ["${xLintArg},-path"]

task bundle(dependsOn: jar) {
    description = 'Distribution for zooplus spring integration mail module'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "http://repo.zooplus.de/artifactory/crm-local"
        }
    }
}
