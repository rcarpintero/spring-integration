ext {
    linkScmUrl = 'https://github.com/rcarpinterospring-integration'
    linkScmConnection = 'scm:git:git://github.com/rcarpintero/spring-integration.git'
    linkScmDevConnection = 'scm:git:ssh://git@github.com:rcarpintero/spring-integration.git'
}

group = 'org.springframework.integration'

repositories {
    mavenCentral()
}

ext.javadocLinks = [
    'http://docs.oracle.com/javase/7/docs/api/',
    'http://docs.oracle.com/javaee/6/api/',
] as String[]


apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'jacoco'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

ext {
        springVersion = '4.3.3.RELEASE' //project.hasProperty('springVersion') ? project.springVersion : '5.0.0.BUILD-SNAPSHOT'
        springIntVersion = '4.3.4.RELEASE'
}

sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources', 'src/test/java']
        }
    }
}

jacoco {
    toolVersion = "0.7.2.201409121644"
}

// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all,-options,-processing'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

task checkTestConfigs {
    doLast {
        def configFiles = []
            sourceSets.test.java.srcDirs.each {
                fileTree(it).include('**/*.xml').exclude('**/log4j.xml').each { configFile ->
                    def configXml = new XmlParser(false, false).parse(configFile)

                        if (configXml.@'xsi:schemaLocation' ==~ /.*spring-[a-z-]*\d\.\d\.xsd.*/) {
                            configFiles << configFile
                        }
                }
            }
        if (configFiles) {
            throw new InvalidUserDataException('Hardcoded XSD version in the config files:\n' +
                    configFiles.collect {relativePath(it)}.join('\n') +
                    '\nPlease, use versionless schemaLocations for Spring XSDs to avoid issues with builds ' +
                    'on different versions of dependencies.')
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/reports/jacoco/html"
    }
}

test {
    maxHeapSize = "1024m"
    jacoco {
       append = false
       destinationFile = file("$buildDir/jacoco.exec")
    }
}

task testAll(type: Test)

tasks.withType(Test).all {
    // suppress all console output during testing unless running `gradle -i`
    logging.captureStandardOutput(LogLevel.INFO)
        dependsOn checkTestConfigs

    environment 'SI_FATAL_WHEN_NO_BEANFACTORY', 'true'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    manifest {
        attributes('Implementation-Version': version)
    }
}

build.dependsOn jacocoTestReport

description = 'Spring Integration Mail Support'

dependencies {
    compile "org.springframework.integration:spring-integration-core:$springIntVersion"
    compile "org.springframework:spring-context-support:$springVersion"
    compile "org.springframework.integration:spring-integration-core:$springIntVersion"
    testCompile "org.springframework.integration:spring-integration-test:$springIntVersion"
    compile("javax.mail:javax.mail-api:$javaxMailVersion", provided)
    compile("com.sun.mail:imap:$javaxMailVersion", provided)
    compile("com.sun.mail:javax.mail:$javaxMailVersion", provided);
    compile("javax.activation:activation:$javaxActivationVersion", optional)
    testRuntime "org.slf4j:slf4j-log4j12:$slf4jVersion"
}

// suppress javax.activation path warnings
[compileJava,compileTestJava]*.options*.compilerArgs = ["${xLintArg},-path"]

task dist(dependsOn: assemble) {
    description = 'Distribution for zooplus spring integration mail module'
}
